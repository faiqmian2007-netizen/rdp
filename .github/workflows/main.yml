name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and (optionally) disable NLA
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || $true
          
          # Allow incoming RDP (3389) only from the Tailscale address space 100.64.0.0/10
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389 remoteip=100.64.0.0/10

          # Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        id: create_user
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special chars
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # If user exists, remove first to ensure clean state
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name "RDP"
          }

          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          # Export credentials to GITHUB_ENV (do NOT Write-Host the password)
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USERNAME=RDP"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASSWORD=$password"

          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
            Write-Error "tailscale.exe not found at $tsExe"
            exit 1
          }

          # Use a CI-unique hostname and non-interactive authkey
          $hostname = "gh-runner-$($env:GITHUB_RUN_ID)"
          & $tsExe up --authkey="$env:TAILSCALE_AUTH_KEY" --hostname="$hostname" --accept-routes=false
          if ($LASTEXITCODE -ne 0) {
            Write-Error "tailscale up failed with exit code $LASTEXITCODE"
            & $tsExe status
            exit $LASTEXITCODE
          }

          # Wait and parse first IPv4 address
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 18) {
              Start-Sleep -Seconds 5
              $out = (& $tsExe ip -4) -join "`n"
              $match = [regex]::Match($out, '([0-9]{1,3}\.){3}[0-9]{1,3}')
              if ($match.Success) { $tsIP = $match.Value.Trim() }
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned after retries. Exiting."
              & $tsExe status
              exit 1
          }

          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"
          Write-Host "Tailscale IP: $tsIP"

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          if (-not $env:TAILSCALE_IP) {
            Write-Error "TAILSCALE_IP is not set"
            exit 1
          }

          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Quiet
          if (-not $testResult) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }
          Write-Host "TCP connectivity to RDP port 3389 is successful."

      - name: Maintain Connection (interactive hold)
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USERNAME"
          Write-Host "Password: (stored in GITHUB_ENV; not printed for security)"
          Write-Host "==================`n"

          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date -Format o)] RDP Active - cancel workflow to terminate"
              Start-Sleep -Seconds 300
          }
