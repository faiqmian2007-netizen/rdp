name: RDP - PR Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and ensure password auth is allowed (NLA optional)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force

          # Cleanup previous firewall rule (ignore errors)
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || $true

          # Allow RDP only from Tailscale address space
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389 remoteip=100.64.0.0/10

          Restart-Service -Name TermService -Force

      - name: Create or Reset RDP User (use secret for password)
        shell: pwsh
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}         # set this secret in repo/settings
        run: |
          if (-not $env:RDP_PASSWORD) {
            Write-Error "Secret RDP_PASSWORD is not set. Add it to repository secrets."
            exit 1
          }

          $plainPw = $env:RDP_PASSWORD
          $securePass = ConvertTo-SecureString $plainPw -AsPlainText -Force

          # If user exists, reset password; otherwise create
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
            Set-LocalUser -Name "RDP" -Password $securePass
            Enable-LocalUser -Name "RDP"
          } else {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          }

          # Ensure membership
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue

          # Export username (but NOT the password) to GITHUB_ENV for downstream steps
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USERNAME=RDP"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_CREDS=User: RDP | Password: (stored in secret)"

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
            Write-Error "Secret TAILSCALE_AUTH_KEY is not set. Add it to repository secrets."
            exit 1
          }

          $tsExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
            Write-Error "tailscale.exe not found at $tsExe"
            exit 1
          }

          $hostname = "gh-pr-$($env:GITHUB_RUN_ID)"
          & $tsExe up --authkey="$env:TAILSCALE_AUTH_KEY" --hostname="$hostname" --accept-routes=false
          if ($LASTEXITCODE -ne 0) {
            Write-Error "tailscale up failed with exit code $LASTEXITCODE"
            & $tsExe status
            exit $LASTEXITCODE
          }

          # Wait for Tailscale IPv4
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 18) {
            Start-Sleep -Seconds 5
            $out = (& $tsExe ip -4) -join "`n"
            $m = [regex]::Match($out, '([0-9]{1,3}\.){3}[0-9]{1,3}')
            if ($m.Success) { $tsIP = $m.Value.Trim() }
            $retries++
          }

          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned after retries."
            & $tsExe status
            exit 1
          }

          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"
          Write-Host "TAILSCALE_IP=$tsIP"

      - name: Verify RDP Accessibility (quick TCP test)
        shell: pwsh
        run: |
          if (-not $env:TAILSCALE_IP) {
            Write-Error "TAILSCALE_IP not set"
            exit 1
          }

          $ok = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Quiet
          if (-not $ok) {
            Write-Error "Cannot connect to RDP port 3389 on $env:TAILSCALE_IP"
            exit 1
          }
          Write-Host "RDP port reachable on $env:TAILSCALE_IP (via Tailscale)."

      - name: Post PR comment (optional) - prints connection info to Actions log only
        if: always()
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS (do NOT share logs publicly) ==="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USERNAME"
          Write-Host "Password: (stored in repository secret RDP_PASSWORD)"
          Write-Host "==============================================`n"

      # Optional: keep job alive for manual testing (comment out if not needed)
      # - name: Maintain Connection (hold for manual testing)
      #   shell: pwsh
      #   run: |
      #     while ($true) { Start-Sleep -Seconds 300 }
